#include <stdio.h>

int main()
{        
    int w, x, h;
    scanf("%d %d %d", &w, &x, &h);  // 读取立方体的尺寸
    
    int q;
    scanf("%d", &q);  // 读取切割次数
    
    // 创建三维数组，标记每个小方块是否存在
    // 0表示存在，1表示已被切割
    int arr[21][21][21] = {0};  // 最大尺寸20，数组开21
    
    // 处理所有q次切割
    for(int cut = 0; cut < q; cut++) {
        int x1, y1, z1, x2, y2, z2;
        scanf("%d %d %d %d %d %d", &x1, &y1, &z1, &x2, &y2, &z2);
        
        // 标记被切割的区域为1（消失）
        // 注意：题目坐标从1开始，数组索引也从1开始使用
        for(int i = x1; i <= x2; i++) {
            for(int j = y1; j <= y2; j++) {
                for(int k = z1; k <= z2; k++) {
                    arr[i][j][k] = 1;  // 标记为已切割
                }
            }
        }
    }
    
    // 统计剩余的小立方体数量
    int count = 0;
    for(int i = 1; i <= w; i++) {
        for(int j = 1; j <= x; j++) {
            for(int k = 1; k <= h; k++) {
                if(arr[i][j][k] == 0) {  // 如果小方块还存在
                    count++;
                }
            }
        }
    }
    
    printf("%d", count);  // 输出结果
    return 0;
}

---------------------------------------------------------------------------------------------
#include <stdio.h>

int main() {
    int w, x, h;  // 立方体的长宽高
    int q;        // 切割次数
    int cube[21][21][21] = {0};  // 三维数组，记录每个小方块状态，0表示存在
    
    // 读取立方体尺寸
    scanf("%d %d %d", &w, &x, &h);
    
    // 读取切割次数
    scanf("%d", &q);
    
    // 处理每次切割
    for (int i = 0; i < q; i++) {
        int x1, y1, z1, x2, y2, z2;
        // 读取切割区域的两个对角点坐标
        scanf("%d %d %d %d %d %d", &x1, &y1, &z1, &x2, &y2, &z2);
        
        // 遍历切割区域内的所有小方块，标记为已切割（1）
        for (int a = x1; a <= x2; a++) {
            for (int b = y1; b <= y2; b++) {
                for (int c = z1; c <= z2; c++) {
                    cube[a][b][c] = 1;
                }
            }
        }
    }
    
    // 统计剩余的小方块数量
    int remaining = 0;
    for (int i = 1; i <= w; i++) {
        for (int j = 1; j <= x; j++) {
            for (int k = 1; k <= h; k++) {
                if (cube[i][j][k] == 0) {
                    remaining++;
                }
            }
        }
    }
    
    // 输出结果
    printf("%d\n", remaining);
    
    return 0;
}
