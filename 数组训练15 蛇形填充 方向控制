#include <stdio.h>

int main() {
    int n;  // 定义变量n，用于存储用户输入的矩阵大小
    scanf("%d", &n);  // 读取用户输入的n值（1≤n≤9）
    
    // 定义10×10的矩阵，初始所有元素为0
    // 使用大小10是为了确保n≤9时不会数组越界
    int matrix[10][10] = {0};  
    
    // 定义四个移动方向：右、下、左、上
    // 每个方向用一个二维向量表示 [行变化, 列变化]
    int dir[4][2] = {
        {0, 1},   // 方向0：向右移动（行不变，列+1）
        {1, 0},   // 方向1：向下移动（行+1，列不变）
        {0, -1},  // 方向2：向左移动（行不变，列-1）
        {-1, 0}   // 方向3：向上移动（行-1，列不变）
    };
    int direction = 0;  // 当前移动方向，初始为0（向右）
    
    int row = 0, col = 0;  // 当前位置坐标，初始在左上角(0,0)
    int num = 1;           // 当前要填入的数字，从1开始
    
    // 主循环：填充整个n×n矩阵
    // 循环条件：当要填入的数字小于等于n×n时继续
    while (num <= n * n) {
        // 将当前数字填入矩阵的当前位置
        matrix[row][col] = num;
        num++;  // 数字递增，准备填入下一个数字
        
        // 计算按照当前方向移动后的下一个位置
        int next_row = row + dir[direction][0];  // 计算下一位置的行坐标
        int next_col = col + dir[direction][1];  // 计算下一位置的列坐标
        
        // 检查下一个位置是否有效（需要改变方向的条件）：
        // 1. next_row < 0：行坐标超出上边界
        // 2. next_row >= n：行坐标超出下边界  
        // 3. next_col < 0：列坐标超出左边界
        // 4. next_col >= n：列坐标超出右边界
        // 5. matrix[next_row][next_col] != 0：该位置已经被填充过
        if (next_row < 0 || next_row >= n || next_col < 0 || next_col >= n || 
            matrix[next_row][next_col] != 0) {
            // 如果下一个位置无效，改变移动方向
            // 使用模4运算实现方向的循环切换：0→1→2→3→0→...
            direction = (direction + 1) % 4;
            
            // 重新计算改变方向后的下一个位置
            next_row = row + dir[direction][0];
            next_col = col + dir[direction][1];
        }
        
        // 更新当前位置为下一个有效位置
        row = next_row;
        col = next_col;
    }
    
    // 输出生成的蛇形矩阵
    // 外层循环遍历每一行
    for (int i = 0; i < n; i++) {
        // 内层循环遍历当前行的每一列
        for (int j = 0; j < n; j++) {
            // 输出矩阵元素，使用%3d格式确保每个数字占3个字符宽度
            // 数字右对齐，不足3位时在前面补空格
            printf("%3d", matrix[i][j]);
        }
        // 每行输出结束后换行
        printf("\n");
    }
    
    return 0;  // 程序正常结束
}
----------------------------------------------------------------------------------------------------
